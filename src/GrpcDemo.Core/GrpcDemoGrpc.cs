// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: src/GrpcDemo.Core/GrpcDemo.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcDemo.Core {
  public static partial class DemoService
  {
    static readonly string __ServiceName = "GrpcDemo.Core.DemoService";

    static readonly grpc::Marshaller<global::GrpcDemo.Core.Message> __Marshaller_GrpcDemo_Core_Message = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDemo.Core.Message.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcDemo.Core.Empty> __Marshaller_GrpcDemo_Core_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDemo.Core.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcDemo.Core.Event> __Marshaller_GrpcDemo_Core_Event = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDemo.Core.Event.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcDemo.Core.SingleEvent> __Marshaller_GrpcDemo_Core_SingleEvent = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDemo.Core.SingleEvent.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcDemo.Core.ManyEvents> __Marshaller_GrpcDemo_Core_ManyEvents = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDemo.Core.ManyEvents.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcDemo.Core.Message, global::GrpcDemo.Core.Empty> __Method_Send = new grpc::Method<global::GrpcDemo.Core.Message, global::GrpcDemo.Core.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Send",
        __Marshaller_GrpcDemo_Core_Message,
        __Marshaller_GrpcDemo_Core_Empty);

    static readonly grpc::Method<global::GrpcDemo.Core.Message, global::GrpcDemo.Core.Message> __Method_SendWithReply = new grpc::Method<global::GrpcDemo.Core.Message, global::GrpcDemo.Core.Message>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendWithReply",
        __Marshaller_GrpcDemo_Core_Message,
        __Marshaller_GrpcDemo_Core_Message);

    static readonly grpc::Method<global::GrpcDemo.Core.Message, global::GrpcDemo.Core.Empty> __Method_SendStream = new grpc::Method<global::GrpcDemo.Core.Message, global::GrpcDemo.Core.Empty>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "SendStream",
        __Marshaller_GrpcDemo_Core_Message,
        __Marshaller_GrpcDemo_Core_Empty);

    static readonly grpc::Method<global::GrpcDemo.Core.Message, global::GrpcDemo.Core.Message> __Method_SendStreamWithReplyStream = new grpc::Method<global::GrpcDemo.Core.Message, global::GrpcDemo.Core.Message>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SendStreamWithReplyStream",
        __Marshaller_GrpcDemo_Core_Message,
        __Marshaller_GrpcDemo_Core_Message);

    static readonly grpc::Method<global::GrpcDemo.Core.Event, global::GrpcDemo.Core.Empty> __Method_Push = new grpc::Method<global::GrpcDemo.Core.Event, global::GrpcDemo.Core.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Push",
        __Marshaller_GrpcDemo_Core_Event,
        __Marshaller_GrpcDemo_Core_Empty);

    static readonly grpc::Method<global::GrpcDemo.Core.Empty, global::GrpcDemo.Core.SingleEvent> __Method_Pull = new grpc::Method<global::GrpcDemo.Core.Empty, global::GrpcDemo.Core.SingleEvent>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Pull",
        __Marshaller_GrpcDemo_Core_Empty,
        __Marshaller_GrpcDemo_Core_SingleEvent);

    static readonly grpc::Method<global::GrpcDemo.Core.Event, global::GrpcDemo.Core.Empty> __Method_PushManyStream = new grpc::Method<global::GrpcDemo.Core.Event, global::GrpcDemo.Core.Empty>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "PushManyStream",
        __Marshaller_GrpcDemo_Core_Event,
        __Marshaller_GrpcDemo_Core_Empty);

    static readonly grpc::Method<global::GrpcDemo.Core.Empty, global::GrpcDemo.Core.ManyEvents> __Method_PullMany = new grpc::Method<global::GrpcDemo.Core.Empty, global::GrpcDemo.Core.ManyEvents>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PullMany",
        __Marshaller_GrpcDemo_Core_Empty,
        __Marshaller_GrpcDemo_Core_ManyEvents);

    static readonly grpc::Method<global::GrpcDemo.Core.Empty, global::GrpcDemo.Core.Event> __Method_PullManyStream = new grpc::Method<global::GrpcDemo.Core.Empty, global::GrpcDemo.Core.Event>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "PullManyStream",
        __Marshaller_GrpcDemo_Core_Empty,
        __Marshaller_GrpcDemo_Core_Event);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcDemo.Core.GrpcDemoReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DemoService</summary>
    public abstract partial class DemoServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::GrpcDemo.Core.Empty> Send(global::GrpcDemo.Core.Message request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcDemo.Core.Message> SendWithReply(global::GrpcDemo.Core.Message request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcDemo.Core.Empty> SendStream(grpc::IAsyncStreamReader<global::GrpcDemo.Core.Message> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SendStreamWithReplyStream(grpc::IAsyncStreamReader<global::GrpcDemo.Core.Message> requestStream, grpc::IServerStreamWriter<global::GrpcDemo.Core.Message> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcDemo.Core.Empty> Push(global::GrpcDemo.Core.Event request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcDemo.Core.SingleEvent> Pull(global::GrpcDemo.Core.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcDemo.Core.Empty> PushManyStream(grpc::IAsyncStreamReader<global::GrpcDemo.Core.Event> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcDemo.Core.ManyEvents> PullMany(global::GrpcDemo.Core.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task PullManyStream(global::GrpcDemo.Core.Empty request, grpc::IServerStreamWriter<global::GrpcDemo.Core.Event> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DemoService</summary>
    public partial class DemoServiceClient : grpc::ClientBase<DemoServiceClient>
    {
      /// <summary>Creates a new client for DemoService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DemoServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DemoService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DemoServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DemoServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DemoServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::GrpcDemo.Core.Empty Send(global::GrpcDemo.Core.Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Send(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcDemo.Core.Empty Send(global::GrpcDemo.Core.Message request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Send, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDemo.Core.Empty> SendAsync(global::GrpcDemo.Core.Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDemo.Core.Empty> SendAsync(global::GrpcDemo.Core.Message request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Send, null, options, request);
      }
      public virtual global::GrpcDemo.Core.Message SendWithReply(global::GrpcDemo.Core.Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendWithReply(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcDemo.Core.Message SendWithReply(global::GrpcDemo.Core.Message request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendWithReply, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDemo.Core.Message> SendWithReplyAsync(global::GrpcDemo.Core.Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendWithReplyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDemo.Core.Message> SendWithReplyAsync(global::GrpcDemo.Core.Message request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendWithReply, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::GrpcDemo.Core.Message, global::GrpcDemo.Core.Empty> SendStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::GrpcDemo.Core.Message, global::GrpcDemo.Core.Empty> SendStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_SendStream, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::GrpcDemo.Core.Message, global::GrpcDemo.Core.Message> SendStreamWithReplyStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendStreamWithReplyStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::GrpcDemo.Core.Message, global::GrpcDemo.Core.Message> SendStreamWithReplyStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SendStreamWithReplyStream, null, options);
      }
      public virtual global::GrpcDemo.Core.Empty Push(global::GrpcDemo.Core.Event request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Push(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcDemo.Core.Empty Push(global::GrpcDemo.Core.Event request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Push, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDemo.Core.Empty> PushAsync(global::GrpcDemo.Core.Event request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PushAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDemo.Core.Empty> PushAsync(global::GrpcDemo.Core.Event request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Push, null, options, request);
      }
      public virtual global::GrpcDemo.Core.SingleEvent Pull(global::GrpcDemo.Core.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Pull(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcDemo.Core.SingleEvent Pull(global::GrpcDemo.Core.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Pull, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDemo.Core.SingleEvent> PullAsync(global::GrpcDemo.Core.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PullAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDemo.Core.SingleEvent> PullAsync(global::GrpcDemo.Core.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Pull, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::GrpcDemo.Core.Event, global::GrpcDemo.Core.Empty> PushManyStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PushManyStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::GrpcDemo.Core.Event, global::GrpcDemo.Core.Empty> PushManyStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_PushManyStream, null, options);
      }
      public virtual global::GrpcDemo.Core.ManyEvents PullMany(global::GrpcDemo.Core.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PullMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcDemo.Core.ManyEvents PullMany(global::GrpcDemo.Core.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PullMany, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDemo.Core.ManyEvents> PullManyAsync(global::GrpcDemo.Core.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PullManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDemo.Core.ManyEvents> PullManyAsync(global::GrpcDemo.Core.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PullMany, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcDemo.Core.Event> PullManyStream(global::GrpcDemo.Core.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PullManyStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcDemo.Core.Event> PullManyStream(global::GrpcDemo.Core.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_PullManyStream, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DemoServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DemoServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DemoServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Send, serviceImpl.Send)
          .AddMethod(__Method_SendWithReply, serviceImpl.SendWithReply)
          .AddMethod(__Method_SendStream, serviceImpl.SendStream)
          .AddMethod(__Method_SendStreamWithReplyStream, serviceImpl.SendStreamWithReplyStream)
          .AddMethod(__Method_Push, serviceImpl.Push)
          .AddMethod(__Method_Pull, serviceImpl.Pull)
          .AddMethod(__Method_PushManyStream, serviceImpl.PushManyStream)
          .AddMethod(__Method_PullMany, serviceImpl.PullMany)
          .AddMethod(__Method_PullManyStream, serviceImpl.PullManyStream).Build();
    }

  }
}
#endregion
